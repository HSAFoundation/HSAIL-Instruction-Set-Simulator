#!/usr/bin/env perl

# syncing hsa team's perforce files to MCW's mercurial repository

#
# Usage:
#  cd to root of hg repo
#  /path/to/sync-p4-to-hg -param=/path/to/filelist

if ($#ARGV >= 0) {
    $switch = $ARGV[0]; shift;
    if ($switch =~ /-c/) {
        $paramfile = $ARGV[0];
    } else {
        die("bad arguments");
    }
}

# argument parsing
print "using parameter file $paramfile\n";
if ($paramfile eq "") { die("bad arguments"); }

# print `p4 client -o | grep Root | grep -v '#' | awk '{print $2;}'`
open(P4, "p4 client -o |");
while(<P4>) {
    if ($_ =~ /Root:/ && $_ !~ '#') {
	($f1, $f2) = split(' ', $_, -1);
	$rootdir = $f2;
    }
}
close(P4);

if ($rootdir !~ /\//) { die("bad rootdir.  P4 connection problems?"); }

# sync-up hg
system("hg up");

open(FILES, $paramfile);
while(<FILES>) {
    chop;
    # ignore comments
    if (/^#/) { next; }

    ($depotpath, $hgpath) = split;

    # first find p4-related info
    # latest p4 revision
    @p4filelog = `p4 filelog $depotpath`;
    $p4last = $p4filelog[1];
    chop $p4last;
    $p4last =~ s/^\.\.\. #(\d+) .*$/\1/;
    # get file path
    $p4file = `p4 where $p4filelog[0]`;
    ($ignore, $ignore, $p4file) = split(' ', $p4file);
    $p4file =~ s/$rootdir//;
    $p4file =~ s/^\///;

    #find revisions on hg
    open(HG, "hg log $hgpath |");
    $hgmaxrev = -1;
    while(<HG>) {
	chop;
	# can't trust hg changesets.  We put revision in comment
	if (/summary:/) {
	    $hgmaxrev = $_;
	    $hgmaxrev =~ s/^.*revision:(\d+) .*$/\1/;
	}
	if ($hgmaxrev > 0) { last; }
    }
    close(HG);

    # if hgmaxrev is 0, file exists but with initial rev
    # if -1, the file does not exist
    # is >0, it must be an existing revision
    if ($hgmaxrev == -1) {
	# file does not exist...  try to add it
	print "creating file $hgpath\n";
	system("mkdir -p `dirname $hgpath`");
	system("touch $hgpath");
	system("hg add $hgpath");
	system("hg ci -m \"$hgpath initial revision\"");
    }

    print "syncing $p4file#$p4last to $hgpath#$hgmaxrev\n";

    # find out if last hg tip matches perforce's last rev
    # if they match (no changes) verify that file contents are the same
    if ($p4last == $hgmaxrev) {
	system("rm -f $hgpath.perforce");
	system("p4 print -o $hgpath.perforce $depotpath#$p4last >/dev/null");
	if (`diff $hgpath $hgpath.perforce`) {
	    die("file contents of $hgpath are not the same for rev $p4last");
	}
	system("rm -f $hgpath.perforce");
    }

    # if max revisions don't match, copy revisions that are missing
    # (assumes that already existing revisions are correct)
    for ($i = $hgmaxrev+1; $i <= $p4last; $i++) {
	if ($i == 0) { next; }
	print "syncing iteration $i for $hgpath\n";
	system("p4 print $depotpath#$i >$hgpath");
	# get changelist number
	$changelist = `p4 files $depotpath#$i`;
	chop $changelist;
	$changelist =~ s/^.* change (\d+) \(.*$/\1/;
	system("hg ci -m \"$hgpath revision:$i changelist:$changelist\"");
    }
}
